apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: vulnerability-record-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files (Dockerfile etc..) are expected to be
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: container-registry-apikey-secret-key
        description: field in the secret that contains the api key used to login to ibmcloud container registry
        default: 'API_KEY'
      - name: scanReportFile
        description: filename for the scan report (json format) of the given image. It will be copied in the task-pvc
        default: ''
  steps:
    - name: publish-vuln-advisor-record
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: $(inputs.params.container-registry-apikey-secret-key)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          source ./build.properties
          cat ./build.properties
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          # Record vulnerability information
          if jq -e '.services[] | select(.service_id=="draservicebroker")' /cd-config/toolchain.json > /dev/null 2>&1; then
            export TOOLCHAIN_ID=${TOOLCHAIN_ID} # for doi plugin
            ibmcloud login --apikey ${API_KEY} --no-region
            set -x
            ibmcloud doi publishtestrecord --logicalappname="${APP_NAME:-$IMAGE_NAME}" --buildnumber=$BUILD_NUMBER --filelocation ./$(inputs.params.scanReportFile) --type vulnerabilityadvisor
            set +x
          fi
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /artifacts
          name: task-volume
  volumes:
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)