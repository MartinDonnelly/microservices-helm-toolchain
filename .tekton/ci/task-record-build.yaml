apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: record-build-task
spec:
  params:
    - name: app-name
      description: Logical application name for DevOps Insights
    - name: toolchain-id
      description: Toolchain service instance id
    - name: build-number
      description: Pipeline build number
    - name: repository
      description: Repository url 
    - name: branch
      description: Repository branch
    - name: commit-id
      description: Repository commit id
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: cd-secret
    - name: ibmcloudApi
      description: the ibmcloud api
      default: https://cloud.ibm.com
  workspaces:
    - name: artifacts
      description: the artifacts folder for this task
      mountPath: /artifacts
  steps:
    # - name: record-git-creds
    #   image: ibmcom/pipeline-base-image
    #   workingDir: /artifacts
    #   command: ["/bin/bash", "-c"]
    #   args:
    #     - |
    #       set -e -o pipefail
    #       ls -al
    #       # env
    #       # source ./build.properties
    #       # Record git info to later contribute to umbrella chart repo
    #       # GIT_COMMIT=$(git rev-parse HEAD)
    #       # GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    #       # GIT_REPO_NAME=$(basename `git rev-parse --show-toplevel`)
    #       GIT_REMOTE_URL=$( git config --get remote.origin.url )
    #       GIT_USER=$( echo ${GIT_REMOTE_URL} | cut -d/ -f3 | cut -d: -f1 )
    #       GIT_PASSWORD=$( echo ${GIT_REMOTE_URL} | cut -d: -f3 | cut -d@ -f1 )
    #       echo "GIT_USER=${GIT_USER}" >> ./build.properties
    #       echo "GIT_PASSWORD=${GIT_PASSWORD}" >> ./build.properties
    #       echo "File 'build.properties' appended for passing env variables to subsequent pipeline jobs:"
    #       cat ./build.properties | grep -v -i password
    # - name: record-build-props
    #   image: ibmcom/pipeline-base-image
    #   workingDir: /artifacts
    #   env:
    #     - name: PIPELINE_RUN_NAME
    #       valueFrom:
    #         fieldRef:
    #           fieldPath: metadata.labels['tekton.dev/pipelineRun']
    #     - name: PIPELINE_RUN_ID
    #       valueFrom:
    #         fieldRef:
    #           fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
    #     - name: BUILD_NUMBER
    #       valueFrom:
    #         fieldRef:
    #           fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
    #     - name: PIPELINE_ID
    #       valueFrom:
    #         fieldRef:
    #           fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
    #     - name: TRIGGER_TYPE
    #       valueFrom:
    #         fieldRef:
    #           fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
    #     - name: TRIGGER_NAME
    #       valueFrom:
    #         fieldRef:
    #           fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
    #     - name: TRIGGERED_BY
    #       valueFrom:
    #         fieldRef:
    #           fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
    #   command: ["/bin/bash", "-c"]
    #   args:
    #     - |
    #       set -e -o pipefail
    #       TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
    #       TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
    #       echo "==============================="
    #       cat /cd-config/toolchain.json | jq .
    #       echo " "
    #       echo "==============================="
    #       echo "TOOLCHAIN_ID=${TOOLCHAIN_ID}" >> ./build.properties
    #       echo "TOOLCHAIN_REGION=${TOOLCHAIN_REGION}" >> ./build.properties
    #       echo "PIPELINE_RUN_NAME='${PIPELINE_RUN_NAME}'" >> ./build.properties
    #       echo "PIPELINE_RUN_ID=${PIPELINE_RUN_ID}" >> ./build.properties
    #       echo "BUILD_NUMBER=${BUILD_NUMBER}" >> ./build.properties
    #       echo "PIPELINE_ID=${PIPELINE_ID}" >> ./build.properties
    #       echo "TRIGGER_TYPE='${TRIGGER_TYPE}'" >> ./build.properties
    #       echo "TRIGGER_NAME='${TRIGGER_NAME}'" >> ./build.properties
    #       echo "TRIGGERED_BY='${TRIGGERED_BY}'" >> ./build.properties
    #       echo "File 'build.properties' appended for passing env variables to subsequent pipeline jobs:"
    #       cat ./build.properties | grep -v -i password
    #   volumeMounts:
    #     - mountPath: /cd-config
    #       name: cd-config-volume
    - name: publish-build-record
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: APP_NAME
          value: $(inputs.params.app-name)
        - name: TOOLCHAIN_ID
          value: $(inputs.params.toolchain-id)  
        - name: BUILD_NUMBER
          value: $(inputs.params.build-number)
        - name: GIT_URL
          value: $(inputs.params.repository) 
        - name: GIT_BRANCH
          value: $(inputs.params.branch)   
        - name: GIT_COMMIT
          value: $(inputs.params.commit-id)
        - name: IBM_CLOUD_API
          value: $(inputs.params.ibmcloudApi)   
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: API_KEY
              optional: true
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          #source ./build.properties
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          echo "APP_NAME='${APP_NAME}'" >> ./build.properties
          cat ./build.properties | grep -v -i password
          BUILD_STATUS=pass
          export TOOLCHAIN_ID=${TOOLCHAIN_ID} # for doi plugin
          ibmcloud login --apikey ${IBM_CLOUD_API_KEY} -a ${IBM_CLOUD_API} --no-region
          set -x
          ibmcloud doi publishbuildrecord --logicalappname="${APP_NAME}" --buildnumber=${BUILD_NUMBER} --branch=${GIT_BRANCH} --repositoryurl=${GIT_URL} --commitid=${GIT_COMMIT} --status=${BUILD_STATUS}
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
  volumes:
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json