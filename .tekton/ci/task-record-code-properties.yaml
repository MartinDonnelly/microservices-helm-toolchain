apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: record-code-properties-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc
      - name: appName
        description: Logical application name for DevOps Insights
  steps:
    - name: record-git-creds
      # image: alpine/git
      image: ibmcom/pipeline-base-image
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          # Record git info to later contribute to umbrella chart repo
          GIT_REMOTE_URL=$( git config --get remote.origin.url )
          echo $GIT_REMOTE_URL
          echo "---"
          git rev-parse HEAD
          GIT_COMMIT=$(git rev-parse HEAD)
          echo $GIT_COMMIT
          echo "---"
          git rev-parse --abbrev-ref HEAD
          GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "GIT_BRANCH=${GIT_BRANCH}"
          echo "---"
          GIT_REPO_NAME=$(basename `git rev-parse --show-toplevel`)
          echo "GIT_REPO_NAME=${GIT_REPO_NAME}"
          echo "---"
          GIT_USER=$( echo ${GIT_REMOTE_URL} | cut -d/ -f3 | cut -d: -f1 )
          GIT_PASSWORD=$( echo ${GIT_REMOTE_URL} | cut -d: -f3 | cut -d@ -f1 )
          # echo "GIT_URL=${GIT_URL}" >> /artifacts/build.properties
          # echo "GIT_BRANCH=${GIT_BRANCH}" >> /artifacts/build.properties
          # echo "GIT_COMMIT=${GIT_COMMIT}" >> /artifacts/build.properties
          echo "GIT_USER=${GIT_USER}" >> /artifacts/build.properties
          echo "GIT_PASSWORD=${GIT_PASSWORD}" >> /artifacts/build.properties
          echo "File 'build.properties' appended for passing env variables to subsequent pipeline jobs:"
          cat /artifacts/build.properties | grep -v -i password
    - name: record-build-properties
      image: ibmcom/pipeline-base-image
      env:
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          echo "TOOLCHAIN_ID=${TOOLCHAIN_IDBUILD_NUMBER}" >> /artifacts/build.properties
          echo "TOOLCHAIN_REGION=${TOOLCHAIN_REGION}" >> /artifacts/build.properties
          echo "PIPELINE_RUN_NAME=${PIPELINE_RUN_NAME}" >> /artifacts/build.properties
          echo "PIPELINE_RUN_ID=${PIPELINE_RUN_ID}" >> /artifacts/build.properties
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> /artifacts/build.properties
          echo "PIPELINE_ID=${PIPELINE_ID}" >> /artifacts/build.properties
          echo "TRIGGER_TYPE=${TRIGGER_TYPE}" >> /artifacts/build.properties
          echo "TRIGGER_NAME=${TRIGGER_NAME}" >> /artifacts/build.properties
          echo "TRIGGERED_BY=${TRIGGERED_BY}" >> /artifacts/build.properties
          echo "File 'build.properties' appended for passing env variables to subsequent pipeline jobs:"
          cat /artifacts/build.properties | grep -v -i password
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /cd-config
          name: cd-config-volume
    - name: record-insights-build-info
      image: ibmcom/pipeline-base-image
      env:
        - name: APP_NAME
          value: $(inputs.params.appName)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          source /artifacts/build.properties
          BUILD_STATUS=pass
          ibmcloud login --apikey ${API_KEY} --no-region
          ibmcloud doi publishbuildrecord --logicalappname="${APP_NAME}" --buildnumber=${BUILD_NUMBER} --branch=${GIT_BRANCH} --repositoryurl=${GIT_URL} --commitid=${GIT_COMMIT} --status=${BUILD_STATUS}
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json