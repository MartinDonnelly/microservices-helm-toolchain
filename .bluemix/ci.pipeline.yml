---
properties:
- name: HELM_VERSION
  value: '2.12.3'
  type: text
- name: IBM_CLOUD_API_KEY
  value: ${API_KEY}
  type: secure
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}
  triggers:
  - type: commit
  properties:
  - name: LOGICAL_APP_NAME
    value: ${APP_NAME}
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  jobs:
  - name: Fetch code
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |+
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      # copy the script below into your app code repo (e.g. ./scripts/build_image.sh) and 'source' it from your pipeline job
      #    source ./scripts/fetch_git_creds.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/fetch_git_creds.sh")
      
      # Perform an entire fetch of associated git repo, and copies it into archive_dir output
      # along with git credentials stored in build.properties, so as a consuming job could leverage these to repost
      # to same or another git repo.
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/fetch_git_creds.sh")

      # Publish build into Insights
      #export PATH=/opt/IBM/node-v4.2/bin:$PATH
      #npm install -g grunt-idra3
      idra --publishbuildrecord --branch=$GIT_BRANCH --repositoryurl=$GIT_URL --commitid=$GIT_COMMIT --status=pass
  - name: Unit Tests
    type: tester
    script: |-
      #!/bin/bash
      # set -x
      # Launch test runner
      if [ -f ./tests/run-tests.sh ]; then
        source ./tests/run-tests.sh
      else
        echo "Test runner script not found: ./tests/run-tests.sh"
      fi
- name: CONTAINERIZE
  inputs:
  - type: job
    stage: BUILD
    job: Fetch code
  triggers:
  - type: stage
  properties:
  - name: build_properties
    value: build.properties
    type: file
  - name: PIPELINE_IMAGE_URL
    value: undefined
    type: text
  jobs:
  - name: Pre-build check
    type: builder
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_prebuild.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_prebuild.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_prebuild.sh")

      # Lints Dockerfile and checks presence of registry namespace.
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_prebuild.sh")  
  - name: Build container image
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/build_image.sh) and 'source' it from your pipeline job
      #    source ./scripts/build_image.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_image.sh")

      # Build a Docker image into IBM Container Service private image registry.
      # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
      # Also copies information into a build.properties file, so they can be reused later on by other scripts (e.g. image url, chart name, ...)
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_image.sh")
  - name: Vulnerability Advisor
    type: tester
    test_type: vulnerabilityadvisor
    fail_stage: false
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_vulnerabilities.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_vulnerabilities.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh")
      
      # Check for vulnerabilities of built image using Vulnerability Advisor
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh")
- name: PUBLISH
  inputs:
  - type: job
    stage: CONTAINERIZE
    job: Build container image
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: LOGICAL_APP_NAME
    value: ${APP_NAME}
    type: text
  - name: LOGICAL_ENV_NAME
    value: PUBLISH
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  - name: build_properties
    value: build.properties
    type: file
  - name: UMBRELLA_REPO_NAME
    value: ${UMBRELLA_REPO_NAME}
    type: text
  - name: POLICY_NAME
    value: ${POLICY_NAME}
    type: text
  - name: CHART_ROOT
    value: chart
    type: text
  jobs:
  - name: Publish Gate
    type: tester
    test_type: simple
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_publish_gate_component_helm_chart.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_publish_gate_component_helm_chart.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_publish_gate_component_helm_chart.sh")

      # Checks a component quality gate
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_publish_gate_component_helm_chart.sh")
  - name: Publish component chart
    type: builder
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/publish_component_helm_chart.sh) and 'source' it from your pipeline job
      #    source ./scripts/publish_component_helm_chart.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/publish_component_helm_chart.sh")
      
      # Publish a component chart into an umbrella chart stored in a git repo
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/publish_component_helm_chart.sh")
